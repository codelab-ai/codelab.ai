# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type App {
  id: ID!
  ownerId: String!
  name: String!
}

type EnumTypeValue {
  id: ID!
  name: String!
}

type Field {
  id: ID!
  key: String!
  name: String!
  description: String
  typeId: String!
  decorators: [Decorator!]!
}

union Decorator = ArrayLengthValidator | MinMaxValidator | RequiredValidator

type ArrayLengthValidator {
  id: ID!
  minLength: Int
  maxLength: Int
}

type MinMaxValidator {
  id: ID!
  min: Int
  max: Int
}

type RequiredValidator {
  id: ID!
  isRequired: Boolean!
}

type FieldCollection {
  fields: [Field!]!

  """Flattened array of all types that are used inside this interface"""
  types: [Type!]!
}

union Type = SimpleType | ArrayType | EnumType | UnitType | InterfaceType

type SimpleType {
  id: ID!
  primitiveType: PrimitiveType!
}

enum PrimitiveType {
  String
  Integer
  Float
  Boolean
}

type ArrayType {
  id: ID!
  typeId: String!
}

type EnumType {
  id: ID!
  allowedValues: [EnumTypeValue!]!
}

type UnitType {
  id: ID!
  allowedUnits: [Unit!]!
}

enum Unit {
  Px
  Pt
  Em
  Rem
  Percent
  Vw
  Vh
}

type InterfaceType {
  interfaceId: String!
}

type Interface {
  id: ID!
  name: String!
  fieldCollection: FieldCollection!
}

type Atom {
  id: ID!
  type: AtomType!
  label: String!
  propTypes: Interface!
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageHeader
  AntDesignPageContainer
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  ReactFragment
  HtmlA
  HtmlDiv
  HtmlP
  HtmlSpan
  HtmlText
}

type PageElement {
  id: ID!
  name: String!
  atom: Atom
}

type PageElementLink {
  """The id of the source PageElement"""
  from: String!

  """The id of the target PageElement"""
  to: String!
  order: Int!
}

type PageElementRoot {
  id: ID!
  name: String!
  atom: Atom

  """All descendant PageElements that are under this root, at any level"""
  descendants: [PageElement!]!

  """All the links connecting the descendant page elements"""
  links: [PageElementLink!]!
}

type Query {
  getApp(input: GetAppInput!): App
  getApps: [App!]!
}

input GetAppInput {
  appId: String!
}

type Mutation {
  createApp(input: CreateAppInput!): App!
  updateApp(input: UpdateAppInput!): App!
  deleteApp(input: DeleteAppInput!): App!
}

input CreateAppInput {
  name: String!
}

input UpdateAppInput {
  id: String!
  data: UpdateAppData!
}

input UpdateAppData {
  name: String!
}

input DeleteAppInput {
  appId: String!
}
